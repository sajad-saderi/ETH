# -*- mode: ruby -*-
# vi: set ft=ruby :

BANDWIDTH_GROUP = "attacker-limit"

# Change the upload bandwidth for the attacker and router here
BANDWIDTH_LIMIT = "100k"

IP_ADDRESS_PREFIX = "192.168.87."


Vagrant.configure("2") do |config|
  ### COMMON CONFIGURATION
  config.vm.box = "bento/debian-10"
    
  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "off"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "off"]
    # Promiscuous mode for VMs: Every VM gets every packet
    vb.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
  end
  
  ### VM-SPECIFIC CONFIGURATION
  
  config.vm.define "attacker" do |attacker|
    shared_config("attacker", attacker, 10)
    bandwidth_limit("attacker", attacker)
    attacker.vm.provision "shell", path: "reroute-internet.sh", run: "always"
  end

  config.vm.define "victim" do |victim|
    shared_config("victim", victim, 20)
    victim.vm.provision "shell", path: "reroute-internet.sh", run: "always"
  end
  
  config.vm.define "dnsserver" do |dnsserver|
    shared_config("dnsserver", dnsserver, 30)
    dnsserver.vm.provision "shell", path: "reroute-internet.sh", run: "always"
  end
  
  config.vm.define "router" do |router|
    shared_config("router", router, 40)
    bandwidth_limit("router", router)
  end
  
  # helper functions to prevent repetition
  def shared_config(vm_name, vmdefine, address)
    vmdefine.vm.hostname = vm_name
    vmdefine.vm.network "private_network", ip: IP_ADDRESS_PREFIX + address.to_s
    vmdefine.vm.provision "shell", path: "system-upgrade.sh"
    vmdefine.vm.provision "shell", path: "provision-"+ vm_name + ".sh"
    # put this at the end, so installing packages works
    vmdefine.vm.provision "shell", path: "set-nameserver.sh", run: "always"
  end
  
  def bandwidth_limit(vm_name, vmdefine)
    vmdefine.vm.provider "virtualbox" do |vb|
      if (not vm_provisioned?(vm_name))
        vb.customize ["bandwidthctl", :id, "add", BANDWIDTH_GROUP,  "--type", "network", "--limit", BANDWIDTH_LIMIT]
        vb.customize ["modifyvm", :id, "--nicbandwidthgroup2", BANDWIDTH_GROUP]
      else
        vb.customize ["bandwidthctl", :id, "set", BANDWIDTH_GROUP,  "--type", "network", "--limit", BANDWIDTH_LIMIT]
      end
    end
  end
  # VirtualBox throws an error if we create the same bandwidth group twice, so we need a way to figure out if we have already ran this
  # ref: https://stackoverflow.com/a/45612332
  def vm_provisioned?(vm_name, provider='virtualbox')
    File.exists?(File.join(File.dirname(__FILE__),".vagrant/machines/#{vm_name}/#{provider}/action_provision"))
  end
end
